{
    "openapi": "3.0.0",
    "info": {
        "title": "LiberflyTeste",
        "version": "0.1"
    },
    "paths": {
        "/api/authors": {
            "get": {
                "tags": [
                    "Authors"
                ],
                "summary": "Get all authors",
                "description": "Returns a list of all authors",
                "operationId": "getAllAuthors",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Authors"
                ],
                "summary": "Create a new author",
                "description": "Creates a new author",
                "operationId": "createAuthor",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthorStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Author created"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/authors/{id}": {
            "get": {
                "tags": [
                    "Authors"
                ],
                "summary": "Get an author by ID",
                "operationId": "c14c739d68f46a33acfd0694a12c27dc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Author ID",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Author not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Authors"
                ],
                "summary": "Update an existing author",
                "operationId": "2a9f154a4061c0d3257520aba98221a5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Author ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Author data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthorStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Author updated successfully"
                    },
                    "404": {
                        "description": "Author not found"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Authors"
                ],
                "summary": "Delete an author",
                "operationId": "c04021713290d77b82e912ec58f94c36",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Author ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Author deleted successfully"
                    },
                    "404": {
                        "description": "Author not found"
                    }
                }
            }
        },
        "/api/books": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get all books",
                "description": "Returns a list of all books",
                "operationId": "getBooks",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Create a new book",
                "description": "Creates a new book",
                "operationId": "createBook",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Book created"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/books/{id}": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get a book by ID",
                "description": "Returns a single book by its ID",
                "operationId": "getBook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the book",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Book not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Books"
                ],
                "summary": "Update a book",
                "description": "Updates an existing book",
                "operationId": "updateBook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the book",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Book updated"
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Books"
                ],
                "summary": "Delete a book",
                "description": "Deletes a book by its ID",
                "operationId": "deleteBook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the book",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Book deleted"
                    },
                    "404": {
                        "description": "Book not found"
                    }
                }
            }
        },
        "/api/books/by-author/{authorId}": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get books by author",
                "description": "Returns a list of books written by a specific author",
                "operationId": "getBooksByAuthor",
                "parameters": [
                    {
                        "name": "authorId",
                        "in": "path",
                        "description": "ID of the author",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Author not found"
                    }
                }
            }
        },
        "/api/books/by-category/{categoryId}": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get books by category",
                "description": "Returns a list of books belonging to a specific category",
                "operationId": "getBooksByCategory",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "ID of the category",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "operationId": "3f5817a34833d0a1f4af4548dd3aeaba",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "operationId": "71fcad552bb0eaba9fb191fd8d8dcab0",
                "requestBody": {
                    "description": "Category data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category by ID",
                "operationId": "c68e76d323c008827a9e47398b1583de",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update an existing category",
                "operationId": "0e686b2748211cc688333ed705dc111f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Category data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully"
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "operationId": "4c12e22a7f8c617bd83bfa1fdc05428d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted successfully"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AuthorStoreRequest": {
                "title": "Author Request",
                "description": "Author request schema",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Author name",
                        "type": "string",
                        "example": "John Doe"
                    }
                },
                "type": "object"
            },
            "BookStoreRequest": {
                "title": "Book Request",
                "description": "Book request schema",
                "required": [
                    "name",
                    "author_id",
                    "category_id",
                    "description"
                ],
                "properties": {
                    "name": {
                        "description": "Book name",
                        "type": "string",
                        "example": "The Hobbit"
                    },
                    "author_id": {
                        "description": "ID of the author",
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "description": "ID of the category",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Book description",
                        "type": "string",
                        "example": "A captivating novel about the Jazz Age in America."
                    }
                },
                "type": "object"
            },
            "CategoryStoreRequest": {
                "title": "Category Request",
                "description": "Category request body parameters",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Category name",
                        "type": "string",
                        "example": "Fantasy"
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Authors",
            "description": "API Endpoints for Authors"
        },
        {
            "name": "Books",
            "description": "API Endpoints for Books"
        },
        {
            "name": "Categories",
            "description": "API Endpoints for Categories"
        }
    ]
}